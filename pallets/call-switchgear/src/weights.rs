
//! Autogenerated weights for bifrost_call_switchgear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_call_switchgear
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_call_switchgear.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_call_switchgear.
pub trait WeightInfo {
	fn switchoff_transaction() -> Weight;
	fn switchon_transaction() -> Weight;
	fn disable_transfers() -> Weight;
	fn enable_transfers() -> Weight;
}

/// Weights for bifrost_call_switchgear using the Substrate node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: CallSwitchgear SwitchedOffTransactions (r:1 w:1)
	/// Proof Skipped: CallSwitchgear SwitchedOffTransactions (max_values: None, max_size: None, mode: Measured)
	fn switchoff_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2479`
		// Minimum execution time: 15_289_000 picoseconds.
		Weight::from_parts(15_568_000, 2479)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CallSwitchgear SwitchedOffTransactions (r:1 w:1)
	/// Proof Skipped: CallSwitchgear SwitchedOffTransactions (max_values: None, max_size: None, mode: Measured)
	fn switchon_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `2530`
		// Minimum execution time: 16_751_000 picoseconds.
		Weight::from_parts(17_130_000, 2530)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CallSwitchgear DisabledTransfers (r:1 w:1)
	/// Proof Skipped: CallSwitchgear DisabledTransfers (max_values: None, max_size: None, mode: Measured)
	fn disable_transfers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2479`
		// Minimum execution time: 13_883_000 picoseconds.
		Weight::from_parts(14_218_000, 2479)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CallSwitchgear DisabledTransfers (r:1 w:1)
	/// Proof Skipped: CallSwitchgear DisabledTransfers (max_values: None, max_size: None, mode: Measured)
	fn enable_transfers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38`
		//  Estimated: `2513`
		// Minimum execution time: 15_014_000 picoseconds.
		Weight::from_parts(15_431_000, 2513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: CallSwitchgear SwitchedOffTransactions (r:1 w:1)
	/// Proof Skipped: CallSwitchgear SwitchedOffTransactions (max_values: None, max_size: None, mode: Measured)
	fn switchoff_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2479`
		// Minimum execution time: 15_289_000 picoseconds.
		Weight::from_parts(15_568_000, 2479)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CallSwitchgear SwitchedOffTransactions (r:1 w:1)
	/// Proof Skipped: CallSwitchgear SwitchedOffTransactions (max_values: None, max_size: None, mode: Measured)
	fn switchon_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `2530`
		// Minimum execution time: 16_751_000 picoseconds.
		Weight::from_parts(17_130_000, 2530)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CallSwitchgear DisabledTransfers (r:1 w:1)
	/// Proof Skipped: CallSwitchgear DisabledTransfers (max_values: None, max_size: None, mode: Measured)
	fn disable_transfers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2479`
		// Minimum execution time: 13_883_000 picoseconds.
		Weight::from_parts(14_218_000, 2479)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CallSwitchgear DisabledTransfers (r:1 w:1)
	/// Proof Skipped: CallSwitchgear DisabledTransfers (max_values: None, max_size: None, mode: Measured)
	fn enable_transfers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38`
		//  Estimated: `2513`
		// Minimum execution time: 15_014_000 picoseconds.
		Weight::from_parts(15_431_000, 2513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
