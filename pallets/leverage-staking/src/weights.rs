// This file is part of Bifrost.

// Copyright (C) 2019-2022 Liebi Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `leverage_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yml`, CPU: `AMD Ryzen 9 3950X 16-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --pallet=leverage-staking
// --extrinsic=*
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./bifrost_leverage_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use core::marker::PhantomData;
use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};

pub trait WeightInfo {
	fn flash_loan_deposit() -> Weight;
}

/// Weight functions for `leverage_staking`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: LeverageStaking AccountFlashLoans (r:1 w:1)
	/// Proof Skipped: LeverageStaking AccountFlashLoans (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:5 w:5)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: LendMarket Markets (r:3 w:0)
	/// Proof Skipped: LendMarket Markets (max_values: None, max_size: None, mode: Measured)
	/// Storage: VtokenMinting MinimumMint (r:1 w:0)
	/// Proof: VtokenMinting MinimumMint (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting TokenPool (r:1 w:1)
	/// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting Fees (r:1 w:0)
	/// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LendMarket LastAccruedInterestTime (r:2 w:2)
	/// Proof Skipped: LendMarket LastAccruedInterestTime (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardSupplyState (r:1 w:1)
	/// Proof Skipped: LendMarket RewardSupplyState (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardSupplySpeed (r:1 w:0)
	/// Proof Skipped: LendMarket RewardSupplySpeed (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardSupplierIndex (r:1 w:1)
	/// Proof Skipped: LendMarket RewardSupplierIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardAccured (r:1 w:1)
	/// Proof Skipped: LendMarket RewardAccured (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket AccountDeposits (r:2 w:1)
	/// Proof Skipped: LendMarket AccountDeposits (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket TotalSupply (r:1 w:1)
	/// Proof Skipped: LendMarket TotalSupply (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket TotalBorrows (r:2 w:1)
	/// Proof Skipped: LendMarket TotalBorrows (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket TotalReserves (r:2 w:0)
	/// Proof Skipped: LendMarket TotalReserves (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket AccountEarned (r:1 w:1)
	/// Proof Skipped: LendMarket AccountEarned (max_values: None, max_size: None, mode: Measured)
	/// Storage: Prices EmergencyPrice (r:2 w:0)
	/// Proof Skipped: Prices EmergencyPrice (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket AccountBorrows (r:2 w:1)
	/// Proof Skipped: LendMarket AccountBorrows (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket LiquidationFreeCollaterals (r:1 w:0)
	/// Proof Skipped: LendMarket LiquidationFreeCollaterals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LendMarket RewardBorrowState (r:1 w:1)
	/// Proof Skipped: LendMarket RewardBorrowState (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardBorrowSpeed (r:1 w:0)
	/// Proof Skipped: LendMarket RewardBorrowSpeed (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardBorrowerIndex (r:1 w:1)
	/// Proof Skipped: LendMarket RewardBorrowerIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket BorrowIndex (r:1 w:0)
	/// Proof Skipped: LendMarket BorrowIndex (max_values: None, max_size: None, mode: Measured)
	fn flash_loan_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3847`
		//  Estimated: `13955`
		// Minimum execution time: 265_916_000 picoseconds.
		Weight::from_parts(267_741_000, 0)
			.saturating_add(Weight::from_parts(0, 13955))
			.saturating_add(T::DbWeight::get().reads(41))
			.saturating_add(T::DbWeight::get().writes(21))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: LeverageStaking AccountFlashLoans (r:1 w:1)
	/// Proof Skipped: LeverageStaking AccountFlashLoans (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:5 w:5)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: LendMarket Markets (r:3 w:0)
	/// Proof Skipped: LendMarket Markets (max_values: None, max_size: None, mode: Measured)
	/// Storage: VtokenMinting MinimumMint (r:1 w:0)
	/// Proof: VtokenMinting MinimumMint (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting TokenPool (r:1 w:1)
	/// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting Fees (r:1 w:0)
	/// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LendMarket LastAccruedInterestTime (r:2 w:2)
	/// Proof Skipped: LendMarket LastAccruedInterestTime (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardSupplyState (r:1 w:1)
	/// Proof Skipped: LendMarket RewardSupplyState (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardSupplySpeed (r:1 w:0)
	/// Proof Skipped: LendMarket RewardSupplySpeed (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardSupplierIndex (r:1 w:1)
	/// Proof Skipped: LendMarket RewardSupplierIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardAccured (r:1 w:1)
	/// Proof Skipped: LendMarket RewardAccured (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket AccountDeposits (r:2 w:1)
	/// Proof Skipped: LendMarket AccountDeposits (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket TotalSupply (r:1 w:1)
	/// Proof Skipped: LendMarket TotalSupply (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket TotalBorrows (r:2 w:1)
	/// Proof Skipped: LendMarket TotalBorrows (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket TotalReserves (r:2 w:0)
	/// Proof Skipped: LendMarket TotalReserves (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket AccountEarned (r:1 w:1)
	/// Proof Skipped: LendMarket AccountEarned (max_values: None, max_size: None, mode: Measured)
	/// Storage: Prices EmergencyPrice (r:2 w:0)
	/// Proof Skipped: Prices EmergencyPrice (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket AccountBorrows (r:2 w:1)
	/// Proof Skipped: LendMarket AccountBorrows (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket LiquidationFreeCollaterals (r:1 w:0)
	/// Proof Skipped: LendMarket LiquidationFreeCollaterals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LendMarket RewardBorrowState (r:1 w:1)
	/// Proof Skipped: LendMarket RewardBorrowState (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardBorrowSpeed (r:1 w:0)
	/// Proof Skipped: LendMarket RewardBorrowSpeed (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket RewardBorrowerIndex (r:1 w:1)
	/// Proof Skipped: LendMarket RewardBorrowerIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendMarket BorrowIndex (r:1 w:0)
	/// Proof Skipped: LendMarket BorrowIndex (max_values: None, max_size: None, mode: Measured)
	fn flash_loan_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3847`
		//  Estimated: `13955`
		// Minimum execution time: 265_916_000 picoseconds.
		Weight::from_parts(267_741_000, 0)
			.saturating_add(Weight::from_parts(0, 13955))
			.saturating_add(RocksDbWeight::get().reads(41))
			.saturating_add(RocksDbWeight::get().writes(21))
	}
}

// #![allow(clippy::all)]

// use frame_support::{
// 	traits::Get,
// 	weights::{constants::RocksDbWeight, Weight},
// };
// use sp_std::marker::PhantomData;

// /// Weight functions needed for pallet_prices.
// pub trait WeightInfo {
// 	fn set_price() -> Weight;
// 	fn reset_price() -> Weight;
// 	fn set_foreign_asset() -> Weight;
// }

// /// Weights for pallet_prices using the Substrate node and recommended hardware.
// pub struct SubstrateWeight<T>(PhantomData<T>);
// impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
// 	fn set_price() -> Weight {
// 		Weight::from_parts(22_361_000 as u64, 3979)
// 			.saturating_add(T::DbWeight::get().reads(1 as u64))
// 			.saturating_add(T::DbWeight::get().writes(1 as u64))
// 	}
// 	fn reset_price() -> Weight {
// 		Weight::from_parts(21_361_000 as u64, 3979)
// 			.saturating_add(T::DbWeight::get().reads(1 as u64))
// 			.saturating_add(T::DbWeight::get().writes(1 as u64))
// 	}
// 	fn set_foreign_asset() -> Weight {
// 		Weight::from_parts(23_361_000 as u64, 3979)
// 			.saturating_add(T::DbWeight::get().reads(1 as u64))
// 			.saturating_add(T::DbWeight::get().writes(1 as u64))
// 	}
// }

// // For backwards compatibility and tests
// impl WeightInfo for () {
// 	fn set_price() -> Weight {
// 		Weight::from_parts(22_361_000 as u64, 3979)
// 			.saturating_add(RocksDbWeight::get().reads(1 as u64))
// 			.saturating_add(RocksDbWeight::get().writes(1 as u64))
// 	}
// 	fn reset_price() -> Weight {
// 		Weight::from_parts(21_361_000 as u64, 3979)
// 			.saturating_add(RocksDbWeight::get().reads(1 as u64))
// 			.saturating_add(RocksDbWeight::get().writes(1 as u64))
// 	}
// 	fn set_foreign_asset() -> Weight {
// 		Weight::from_parts(23_361_000 as u64, 3979)
// 			.saturating_add(RocksDbWeight::get().reads(1 as u64))
// 			.saturating_add(RocksDbWeight::get().writes(1 as u64))
// 	}
// }
