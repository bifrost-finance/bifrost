
//! Autogenerated weights for bifrost_farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_farming
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_farming.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_farming.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn create_farming_pool() -> Weight;
	fn deposit() -> Weight;
	fn withdraw() -> Weight;
	fn claim() -> Weight;
	fn gauge_withdraw() -> Weight;
	fn withdraw_claim() -> Weight;
	fn reset_pool() -> Weight;
	fn force_retire_pool() -> Weight;
	fn kill_pool() -> Weight;
	fn edit_pool() -> Weight;
	fn close_pool() -> Weight;
	fn charge() -> Weight;
	fn force_gauge_claim() -> Weight;
	fn set_retire_limit() -> Weight;
	fn add_boost_pool_whitelist() -> Weight;
	fn set_next_round_whitelist() -> Weight;
	fn vote() -> Weight;
	fn start_boost_round() -> Weight;
	fn end_boost_round() -> Weight;
	fn charge_boost() -> Weight;
}

/// Weights for bifrost_farming using the Substrate node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostPoolInfos (r:1 w:0)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `79`
		//  Estimated: `5682`
		// Minimum execution time: 11_551_000 picoseconds.
		Weight::from_parts(11_998_000, 5682)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: Farming PoolNextId (r:1 w:1)
	/// Proof Skipped: Farming PoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolNextId (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:0 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:0 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn create_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1294`
		// Minimum execution time: 26_788_000 picoseconds.
		Weight::from_parts(27_450_000, 1294)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1743`
		//  Estimated: `20443`
		// Minimum execution time: 92_058_000 picoseconds.
		Weight::from_parts(93_671_000, 20443)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `6030`
		// Minimum execution time: 42_662_000 picoseconds.
		Weight::from_parts(43_714_000, 6030)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `9156`
		// Minimum execution time: 41_887_000 picoseconds.
		Weight::from_parts(43_150_000, 9156)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn gauge_withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `925`
		//  Estimated: `13600`
		// Minimum execution time: 44_629_000 picoseconds.
		Weight::from_parts(46_129_000, 13600)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn withdraw_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `6030`
		// Minimum execution time: 27_691_000 picoseconds.
		Weight::from_parts(29_062_000, 6030)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolNextId (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:0 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn reset_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `435`
		//  Estimated: `4275`
		// Minimum execution time: 31_148_000 picoseconds.
		Weight::from_parts(32_613_000, 4275)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming RetireLimit (r:1 w:0)
	/// Proof Skipped: Farming RetireLimit (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn force_retire_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `657`
		//  Estimated: `10548`
		// Minimum execution time: 38_717_000 picoseconds.
		Weight::from_parts(39_692_000, 10548)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn kill_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `2854`
		// Minimum execution time: 25_222_000 picoseconds.
		Weight::from_parts(26_134_000, 2854)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn edit_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `544`
		//  Estimated: `6038`
		// Minimum execution time: 28_095_000 picoseconds.
		Weight::from_parts(28_860_000, 6038)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn close_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `416`
		//  Estimated: `2891`
		// Minimum execution time: 23_396_000 picoseconds.
		Weight::from_parts(23_893_000, 2891)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn charge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2081`
		//  Estimated: `16901`
		// Minimum execution time: 88_088_000 picoseconds.
		Weight::from_parts(91_285_000, 16901)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Farming RetireLimit (r:1 w:0)
	/// Proof Skipped: Farming RetireLimit (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:2 w:1)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn force_gauge_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `948`
		//  Estimated: `17610`
		// Minimum execution time: 56_166_000 picoseconds.
		Weight::from_parts(59_155_000, 17610)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming RetireLimit (r:1 w:1)
	/// Proof Skipped: Farming RetireLimit (max_values: Some(1), max_size: None, mode: Measured)
	fn set_retire_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `571`
		// Minimum execution time: 14_499_000 picoseconds.
		Weight::from_parts(15_062_000, 571)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostWhitelist (r:0 w:1)
	/// Proof Skipped: Farming BoostWhitelist (max_values: None, max_size: None, mode: Measured)
	fn add_boost_pool_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_966_000 picoseconds.
		Weight::from_parts(5_279_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostNextRoundWhitelist (r:0 w:1)
	/// Proof Skipped: Farming BoostNextRoundWhitelist (max_values: None, max_size: None, mode: Measured)
	fn set_next_round_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112`
		//  Estimated: `112`
		// Minimum execution time: 12_827_000 picoseconds.
		Weight::from_parts(16_084_000, 112)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostPoolInfos (r:1 w:1)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming UserBoostInfos (r:1 w:1)
	/// Proof Skipped: Farming UserBoostInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostWhitelist (r:1 w:0)
	/// Proof Skipped: Farming BoostWhitelist (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostVotingPools (r:1 w:1)
	/// Proof Skipped: Farming BoostVotingPools (max_values: None, max_size: None, mode: Measured)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112`
		//  Estimated: `8368`
		// Minimum execution time: 26_168_000 picoseconds.
		Weight::from_parts(27_006_000, 8368)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Farming BoostPoolInfos (r:1 w:1)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming BoostNextRoundWhitelist (r:1 w:0)
	/// Proof Skipped: Farming BoostNextRoundWhitelist (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostWhitelist (r:2 w:0)
	/// Proof Skipped: Farming BoostWhitelist (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostVotingPools (r:1 w:0)
	/// Proof Skipped: Farming BoostVotingPools (max_values: None, max_size: None, mode: Measured)
	fn start_boost_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `10855`
		// Minimum execution time: 34_421_000 picoseconds.
		Weight::from_parts(35_598_000, 10855)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostPoolInfos (r:1 w:1)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	fn end_boost_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `162`
		//  Estimated: `657`
		// Minimum execution time: 21_563_000 picoseconds.
		Weight::from_parts(22_538_000, 657)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn charge_boost() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1437`
		//  Estimated: `11701`
		// Minimum execution time: 66_206_000 picoseconds.
		Weight::from_parts(68_310_000, 11701)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostPoolInfos (r:1 w:0)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `79`
		//  Estimated: `5682`
		// Minimum execution time: 11_551_000 picoseconds.
		Weight::from_parts(11_998_000, 5682)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: Farming PoolNextId (r:1 w:1)
	/// Proof Skipped: Farming PoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolNextId (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:0 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:0 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn create_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1294`
		// Minimum execution time: 26_788_000 picoseconds.
		Weight::from_parts(27_450_000, 1294)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1743`
		//  Estimated: `20443`
		// Minimum execution time: 92_058_000 picoseconds.
		Weight::from_parts(93_671_000, 20443)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `6030`
		// Minimum execution time: 42_662_000 picoseconds.
		Weight::from_parts(43_714_000, 6030)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `9156`
		// Minimum execution time: 41_887_000 picoseconds.
		Weight::from_parts(43_150_000, 9156)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn gauge_withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `925`
		//  Estimated: `13600`
		// Minimum execution time: 44_629_000 picoseconds.
		Weight::from_parts(46_129_000, 13600)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn withdraw_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `6030`
		// Minimum execution time: 27_691_000 picoseconds.
		Weight::from_parts(29_062_000, 6030)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolNextId (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:0 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn reset_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `435`
		//  Estimated: `4275`
		// Minimum execution time: 31_148_000 picoseconds.
		Weight::from_parts(32_613_000, 4275)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming RetireLimit (r:1 w:0)
	/// Proof Skipped: Farming RetireLimit (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn force_retire_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `657`
		//  Estimated: `10548`
		// Minimum execution time: 38_717_000 picoseconds.
		Weight::from_parts(39_692_000, 10548)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn kill_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `2854`
		// Minimum execution time: 25_222_000 picoseconds.
		Weight::from_parts(26_134_000, 2854)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn edit_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `544`
		//  Estimated: `6038`
		// Minimum execution time: 28_095_000 picoseconds.
		Weight::from_parts(28_860_000, 6038)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn close_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `416`
		//  Estimated: `2891`
		// Minimum execution time: 23_396_000 picoseconds.
		Weight::from_parts(23_893_000, 2891)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn charge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2081`
		//  Estimated: `16901`
		// Minimum execution time: 88_088_000 picoseconds.
		Weight::from_parts(91_285_000, 16901)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Farming RetireLimit (r:1 w:0)
	/// Proof Skipped: Farming RetireLimit (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:2 w:1)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn force_gauge_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `948`
		//  Estimated: `17610`
		// Minimum execution time: 56_166_000 picoseconds.
		Weight::from_parts(59_155_000, 17610)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming RetireLimit (r:1 w:1)
	/// Proof Skipped: Farming RetireLimit (max_values: Some(1), max_size: None, mode: Measured)
	fn set_retire_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `571`
		// Minimum execution time: 14_499_000 picoseconds.
		Weight::from_parts(15_062_000, 571)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostWhitelist (r:0 w:1)
	/// Proof Skipped: Farming BoostWhitelist (max_values: None, max_size: None, mode: Measured)
	fn add_boost_pool_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_966_000 picoseconds.
		Weight::from_parts(5_279_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostNextRoundWhitelist (r:0 w:1)
	/// Proof Skipped: Farming BoostNextRoundWhitelist (max_values: None, max_size: None, mode: Measured)
	fn set_next_round_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112`
		//  Estimated: `112`
		// Minimum execution time: 12_827_000 picoseconds.
		Weight::from_parts(16_084_000, 112)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostPoolInfos (r:1 w:1)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming UserBoostInfos (r:1 w:1)
	/// Proof Skipped: Farming UserBoostInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostWhitelist (r:1 w:0)
	/// Proof Skipped: Farming BoostWhitelist (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostVotingPools (r:1 w:1)
	/// Proof Skipped: Farming BoostVotingPools (max_values: None, max_size: None, mode: Measured)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112`
		//  Estimated: `8368`
		// Minimum execution time: 26_168_000 picoseconds.
		Weight::from_parts(27_006_000, 8368)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Farming BoostPoolInfos (r:1 w:1)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming BoostNextRoundWhitelist (r:1 w:0)
	/// Proof Skipped: Farming BoostNextRoundWhitelist (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostWhitelist (r:2 w:0)
	/// Proof Skipped: Farming BoostWhitelist (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming BoostVotingPools (r:1 w:0)
	/// Proof Skipped: Farming BoostVotingPools (max_values: None, max_size: None, mode: Measured)
	fn start_boost_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `10855`
		// Minimum execution time: 34_421_000 picoseconds.
		Weight::from_parts(35_598_000, 10855)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Farming BoostPoolInfos (r:1 w:1)
	/// Proof Skipped: Farming BoostPoolInfos (max_values: Some(1), max_size: None, mode: Measured)
	fn end_boost_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `162`
		//  Estimated: `657`
		// Minimum execution time: 21_563_000 picoseconds.
		Weight::from_parts(22_538_000, 657)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn charge_boost() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1437`
		//  Estimated: `11701`
		// Minimum execution time: 66_206_000 picoseconds.
		Weight::from_parts(68_310_000, 11701)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
