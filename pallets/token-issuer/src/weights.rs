
//! Autogenerated weights for bifrost_token_issuer
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_token_issuer
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_token_issuer.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_token_issuer.
pub trait WeightInfo {
	fn add_to_issue_whitelist() -> Weight;
	fn remove_from_issue_whitelist() -> Weight;
	fn add_to_transfer_whitelist() -> Weight;
	fn remove_from_transfer_whitelist() -> Weight;
	fn issue() -> Weight;
	fn transfer() -> Weight;
}

/// Weights for bifrost_token_issuer using the Substrate node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: TokenIssuer IssueWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2584`
		// Minimum execution time: 18_987_000 picoseconds.
		Weight::from_parts(19_532_000, 2584)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer IssueWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `2694`
		// Minimum execution time: 17_760_000 picoseconds.
		Weight::from_parts(27_700_000, 2694)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer TransferWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer TransferWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_transfer_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2584`
		// Minimum execution time: 19_271_000 picoseconds.
		Weight::from_parts(19_883_000, 2584)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer TransferWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer TransferWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_transfer_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `2694`
		// Minimum execution time: 17_956_000 picoseconds.
		Weight::from_parts(18_510_000, 2694)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer IssueWhiteList (r:1 w:0)
	/// Proof Skipped: TokenIssuer IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn issue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1829`
		//  Estimated: `13714`
		// Minimum execution time: 55_749_000 picoseconds.
		Weight::from_parts(57_305_000, 13714)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: TokenIssuer TransferWhiteList (r:1 w:0)
	/// Proof Skipped: TokenIssuer TransferWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1979`
		//  Estimated: `14094`
		// Minimum execution time: 65_217_000 picoseconds.
		Weight::from_parts(66_616_000, 14094)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TokenIssuer IssueWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2584`
		// Minimum execution time: 18_987_000 picoseconds.
		Weight::from_parts(19_532_000, 2584)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer IssueWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `2694`
		// Minimum execution time: 17_760_000 picoseconds.
		Weight::from_parts(27_700_000, 2694)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer TransferWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer TransferWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_transfer_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2584`
		// Minimum execution time: 19_271_000 picoseconds.
		Weight::from_parts(19_883_000, 2584)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer TransferWhiteList (r:1 w:1)
	/// Proof Skipped: TokenIssuer TransferWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_transfer_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `2694`
		// Minimum execution time: 17_956_000 picoseconds.
		Weight::from_parts(18_510_000, 2694)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TokenIssuer IssueWhiteList (r:1 w:0)
	/// Proof Skipped: TokenIssuer IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn issue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1829`
		//  Estimated: `13714`
		// Minimum execution time: 55_749_000 picoseconds.
		Weight::from_parts(57_305_000, 13714)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: TokenIssuer TransferWhiteList (r:1 w:0)
	/// Proof Skipped: TokenIssuer TransferWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1979`
		//  Estimated: `14094`
		// Minimum execution time: 65_217_000 picoseconds.
		Weight::from_parts(66_616_000, 14094)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
