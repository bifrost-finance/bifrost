
//! Autogenerated weights for bifrost_asset_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_asset_registry
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_asset_registry.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_asset_registry.
pub trait WeightInfo {
	fn register_native_asset() -> Weight;
	fn update_native_asset() -> Weight;
	fn register_token_metadata() -> Weight;
	fn register_vtoken_metadata() -> Weight;
	fn register_vstoken_metadata() -> Weight;
	fn register_vsbond_metadata() -> Weight;
	fn register_multilocation() -> Weight;
	fn force_set_multilocation() -> Weight;
}

/// Weights for bifrost_asset_registry using the Substrate node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	/// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `7665`
		// Minimum execution time: 26_080_000 picoseconds.
		Weight::from_parts(26_753_000, 7665)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	/// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `8061`
		// Minimum execution time: 30_124_000 picoseconds.
		Weight::from_parts(30_890_000, 8061)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: AssetRegistry NextTokenId (r:1 w:1)
	/// Proof Skipped: AssetRegistry NextTokenId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_token_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4108`
		// Minimum execution time: 22_881_000 picoseconds.
		Weight::from_parts(23_551_000, 4108)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_vtoken_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `772`
		//  Estimated: `5722`
		// Minimum execution time: 26_008_000 picoseconds.
		Weight::from_parts(27_051_000, 5722)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_vstoken_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `698`
		//  Estimated: `5648`
		// Minimum execution time: 25_272_000 picoseconds.
		Weight::from_parts(26_140_000, 5648)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_vsbond_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `756`
		//  Estimated: `5706`
		// Minimum execution time: 27_239_000 picoseconds.
		Weight::from_parts(28_326_000, 5706)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToWeights (r:0 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToWeights (max_values: None, max_size: None, mode: Measured)
	fn register_multilocation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `10129`
		// Minimum execution time: 23_594_000 picoseconds.
		Weight::from_parts(24_131_000, 10129)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToWeights (r:0 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToWeights (max_values: None, max_size: None, mode: Measured)
	fn force_set_multilocation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `10129`
		// Minimum execution time: 23_594_000 picoseconds.
		Weight::from_parts(24_131_000, 10129)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	/// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `7665`
		// Minimum execution time: 26_080_000 picoseconds.
		Weight::from_parts(26_753_000, 7665)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	/// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `8061`
		// Minimum execution time: 30_124_000 picoseconds.
		Weight::from_parts(30_890_000, 8061)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: AssetRegistry NextTokenId (r:1 w:1)
	/// Proof Skipped: AssetRegistry NextTokenId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_token_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4108`
		// Minimum execution time: 22_881_000 picoseconds.
		Weight::from_parts(23_551_000, 4108)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_vtoken_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `772`
		//  Estimated: `5722`
		// Minimum execution time: 26_008_000 picoseconds.
		Weight::from_parts(27_051_000, 5722)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_vstoken_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `698`
		//  Estimated: `5648`
		// Minimum execution time: 25_272_000 picoseconds.
		Weight::from_parts(26_140_000, 5648)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:1)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_vsbond_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `756`
		//  Estimated: `5706`
		// Minimum execution time: 27_239_000 picoseconds.
		Weight::from_parts(28_326_000, 5706)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToWeights (r:0 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToWeights (max_values: None, max_size: None, mode: Measured)
	fn register_multilocation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `10129`
		// Minimum execution time: 23_594_000 picoseconds.
		Weight::from_parts(24_131_000, 10129)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	/// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToLocations (r:1 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToLocations (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyIdToWeights (r:0 w:1)
	/// Proof Skipped: AssetRegistry CurrencyIdToWeights (max_values: None, max_size: None, mode: Measured)
	fn force_set_multilocation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `10129`
		// Minimum execution time: 23_594_000 picoseconds.
		Weight::from_parts(24_131_000, 10129)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
