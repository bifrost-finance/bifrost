// This file is part of Bifrost.

// Copyright (C) 2019-2022 Liebi Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_xcm_action
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-polkadot-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-polkadot-local
// --steps=50
// --repeat=20
// --pallet=bifrost_xcm_action
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./weight.rs
// --template
// ./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_xcm_action.
pub trait WeightInfo {
	fn add_whitelist() -> Weight;
	fn remove_whitelist() -> Weight;
	fn set_execution_fee() -> Weight;
	fn set_transfer_to_fee() -> Weight;
	fn mint() -> Weight;
	fn redeem() -> Weight;
	fn swap() -> Weight;
}

/// Weights for bifrost_xcm_action using the Bifrost node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: XcmAction WhitelistAccountId (r:1 w:1)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn add_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `101`
		//  Estimated: `4907`
		// Minimum execution time: 20_135_000 picoseconds.
		Weight::from_parts(20_866_000, 4907)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:1)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `5016`
		// Minimum execution time: 22_755_000 picoseconds.
		Weight::from_parts(23_464_000, 5016)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: XcmAction ExecutionFee (r:0 w:1)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	fn set_execution_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `25`
		//  Estimated: `2018`
		// Minimum execution time: 15_269_000 picoseconds.
		Weight::from_parts(15_952_000, 2018)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: XcmAction TransferToFee (r:0 w:1)
	/// Proof: XcmAction TransferToFee (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn set_transfer_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `25`
		//  Estimated: `2018`
		// Minimum execution time: 15_209_000 picoseconds.
		Weight::from_parts(15_853_000, 2018)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:0)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: XcmAction ExecutionFee (r:1 w:0)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	/// Storage: VtokenMinting MinimumMint (r:1 w:0)
	/// Proof: VtokenMinting MinimumMint (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting TokenPool (r:1 w:1)
	/// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting Fees (r:1 w:0)
	/// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1345`
		//  Estimated: `28333`
		// Minimum execution time: 130_794_000 picoseconds.
		Weight::from_parts(135_588_000, 28333)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:0)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:0)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: XcmAction ExecutionFee (r:1 w:0)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	/// Storage: VtokenMinting MinimumRedeem (r:1 w:0)
	/// Proof: VtokenMinting MinimumRedeem (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Slp DelegationsOccupied (r:1 w:0)
	/// Proof Skipped: Slp DelegationsOccupied (max_values: None, max_size: None, mode: Measured)
	/// Storage: VtokenMinting Fees (r:1 w:0)
	/// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: VtokenMinting TokenPool (r:1 w:0)
	/// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:0)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	/// Proof: VtokenMinting OngoingTimeUnit (max_values: None, max_size: Some(27), added: 2502, mode: MaxEncodedLen)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1244`
		//  Estimated: `25427`
		// Minimum execution time: 55_919_000 picoseconds.
		Weight::from_parts(57_015_000, 25427)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:0)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: XcmAction ExecutionFee (r:1 w:0)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:0)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1070`
		//  Estimated: `13632`
		// Minimum execution time: 37_290_000 picoseconds.
		Weight::from_parts(37_964_000, 13632)
			.saturating_add(T::DbWeight::get().reads(6_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: XcmAction WhitelistAccountId (r:1 w:1)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn add_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `101`
		//  Estimated: `4907`
		// Minimum execution time: 20_135_000 picoseconds.
		Weight::from_parts(20_866_000, 4907)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:1)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `5016`
		// Minimum execution time: 22_755_000 picoseconds.
		Weight::from_parts(23_464_000, 5016)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: XcmAction ExecutionFee (r:0 w:1)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	fn set_execution_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `25`
		//  Estimated: `2018`
		// Minimum execution time: 15_269_000 picoseconds.
		Weight::from_parts(15_952_000, 2018)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: XcmAction TransferToFee (r:0 w:1)
	/// Proof: XcmAction TransferToFee (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn set_transfer_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `25`
		//  Estimated: `2018`
		// Minimum execution time: 15_209_000 picoseconds.
		Weight::from_parts(15_853_000, 2018)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:0)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: XcmAction ExecutionFee (r:1 w:0)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	/// Storage: VtokenMinting MinimumMint (r:1 w:0)
	/// Proof: VtokenMinting MinimumMint (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting TokenPool (r:1 w:1)
	/// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting Fees (r:1 w:0)
	/// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1345`
		//  Estimated: `28333`
		// Minimum execution time: 130_794_000 picoseconds.
		Weight::from_parts(135_588_000, 28333)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:0)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:0)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: XcmAction ExecutionFee (r:1 w:0)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	/// Storage: VtokenMinting MinimumRedeem (r:1 w:0)
	/// Proof: VtokenMinting MinimumRedeem (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Slp DelegationsOccupied (r:1 w:0)
	/// Proof Skipped: Slp DelegationsOccupied (max_values: None, max_size: None, mode: Measured)
	/// Storage: VtokenMinting Fees (r:1 w:0)
	/// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: VtokenMinting TokenPool (r:1 w:0)
	/// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:0)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	/// Proof: VtokenMinting OngoingTimeUnit (max_values: None, max_size: Some(27), added: 2502, mode: MaxEncodedLen)
	/// Storage: System Number (r:1 w:0)
	/// Proof: System Number (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System ExecutionPhase (r:1 w:0)
	/// Proof: System ExecutionPhase (max_values: Some(1), max_size: Some(5), added: 500, mode: MaxEncodedLen)
	/// Storage: System EventCount (r:1 w:1)
	/// Proof: System EventCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Events (r:1 w:1)
	/// Proof Skipped: System Events (max_values: Some(1), max_size: None, mode: Measured)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1244`
		//  Estimated: `25427`
		// Minimum execution time: 55_919_000 picoseconds.
		Weight::from_parts(57_015_000, 25427)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: XcmAction WhitelistAccountId (r:1 w:0)
	/// Proof: XcmAction WhitelistAccountId (max_values: None, max_size: Some(338), added: 2813, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: XcmAction ExecutionFee (r:1 w:0)
	/// Proof: XcmAction ExecutionFee (max_values: None, max_size: Some(46), added: 2521, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:0)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1070`
		//  Estimated: `13632`
		// Minimum execution time: 37_290_000 picoseconds.
		Weight::from_parts(37_964_000, 13632)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
	}
}
