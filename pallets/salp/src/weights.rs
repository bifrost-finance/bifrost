// This file is part of Bifrost.

// Copyright (C) 2019-2022 Liebi Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_salp
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_salp
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_salp.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bifrost_salp.
pub trait WeightInfo {
	fn contribute() -> Weight;
	fn refund() -> Weight;
	fn unlock() -> Weight;
	fn batch_unlock(k: u32, ) -> Weight;
	fn redeem() -> Weight;
}

/// Weights for bifrost_salp using the Bifrost node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	// Storage: Salp Funds (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: XcmInterface XcmDestWeightAndFee (r:1 w:0)
	// Storage: XcmInterface CurrentNonce (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: PolkadotXcm SupportedVersion (r:1 w:0)
	// Storage: PolkadotXcm VersionDiscoveryQueue (r:1 w:1)
	// Storage: PolkadotXcm SafeXcmVersion (r:1 w:0)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: unknown [0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291] (r:1 w:1)
	fn contribute() -> Weight {
		Weight::from_parts(63_000_000, 28376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: Salp FailedFundsToRefund (r:1 w:0)
	// Storage: Salp Funds (r:1 w:1)
	// Storage: Salp RedeemPool (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn refund() -> Weight {
		Weight::from_parts(109_000_000, 22376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: Salp Funds (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: unknown [0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291] (r:1 w:0)
	fn unlock() -> Weight {
		Weight::from_parts(44_000_000, 18376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: Salp Funds (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: unknown [0x] (r:1 w:0)
	// Storage: unknown [0xc85982571aa615c788ef9b2c16f54f25773fd439e8ee1ed2aa3ae43d48e880f0] (r:1 w:0)
	/// The range of component `k` is `[1, 500]`.
	fn batch_unlock(k: u32, ) -> Weight {
		Weight::from_parts(95_555_000, 38376)
			// Standard Error: 80_000
			.saturating_add(Weight::from_ref_time(23_675_000_u64).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(k as u64)))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(k as u64)))
	}
	// Storage: Salp Funds (r:1 w:1)
	// Storage: Salp RedeemPool (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn redeem() -> Weight {
		Weight::from_parts(89_000_000, 48376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Salp Funds (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: XcmInterface XcmDestWeightAndFee (r:1 w:0)
	// Storage: XcmInterface CurrentNonce (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: PolkadotXcm SupportedVersion (r:1 w:0)
	// Storage: PolkadotXcm VersionDiscoveryQueue (r:1 w:1)
	// Storage: PolkadotXcm SafeXcmVersion (r:1 w:0)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: unknown [0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291] (r:1 w:1)
	fn contribute() -> Weight {
		Weight::from_parts(63_000_000, 28376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: Salp FailedFundsToRefund (r:1 w:0)
	// Storage: Salp Funds (r:1 w:1)
	// Storage: Salp RedeemPool (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn refund() -> Weight {
		Weight::from_parts(109_000_000, 22376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: Salp Funds (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: unknown [0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291] (r:1 w:0)
	fn unlock() -> Weight {
		Weight::from_parts(44_000_000, 18376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: Salp Funds (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: unknown [0x] (r:1 w:0)
	// Storage: unknown [0xc85982571aa615c788ef9b2c16f54f25773fd439e8ee1ed2aa3ae43d48e880f0] (r:1 w:0)
	/// The range of component `k` is `[1, 500]`.
	fn batch_unlock(k: u32, ) -> Weight {
		Weight::from_parts(95_555_000, 38376)
			// Standard Error: 80_000
			.saturating_add(Weight::from_ref_time(23_675_000_u64).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(k as u64)))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(k as u64)))
	}
	// Storage: Salp Funds (r:1 w:1)
	// Storage: Salp RedeemPool (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn redeem() -> Weight {
		Weight::from_parts(89_000_000, 48376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
}
