
//! Autogenerated weights for bifrost_cross_in_out
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_cross_in_out
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_cross_in_out.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_cross_in_out.
pub trait WeightInfo {
	fn register_currency_for_cross_in_out() -> Weight;
	fn deregister_currency_for_cross_in_out() -> Weight;
	fn set_crossing_minimum_amount() -> Weight;
	fn add_to_issue_whitelist() -> Weight;
	fn remove_from_issue_whitelist() -> Weight;
	fn add_to_register_whitelist() -> Weight;
	fn remove_from_register_whitelist() -> Weight;
	fn cross_in() -> Weight;
	fn register_linked_account() -> Weight;
	fn cross_out() -> Weight;
	fn change_outer_linked_account() -> Weight;
}

/// Weights for bifrost_cross_in_out using the Substrate node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:1)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	fn register_currency_for_cross_in_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2517`
		// Minimum execution time: 14_815_000 picoseconds.
		Weight::from_parts(15_503_000, 2517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:1)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	fn deregister_currency_for_cross_in_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `85`
		//  Estimated: `2560`
		// Minimum execution time: 16_233_000 picoseconds.
		Weight::from_parts(16_814_000, 2560)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut CrossingMinimumAmount (r:0 w:1)
	/// Proof Skipped: CrossInOut CrossingMinimumAmount (max_values: None, max_size: None, mode: Measured)
	fn set_crossing_minimum_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_905_000 picoseconds.
		Weight::from_parts(12_215_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut IssueWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2517`
		// Minimum execution time: 18_900_000 picoseconds.
		Weight::from_parts(19_951_000, 2517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut IssueWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `2627`
		// Minimum execution time: 17_468_000 picoseconds.
		Weight::from_parts(18_221_000, 2627)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut RegisterWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut RegisterWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2517`
		// Minimum execution time: 19_622_000 picoseconds.
		Weight::from_parts(20_253_000, 2517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut RegisterWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut RegisterWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `2627`
		// Minimum execution time: 17_760_000 picoseconds.
		Weight::from_parts(18_184_000, 2627)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut CrossingMinimumAmount (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossingMinimumAmount (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut IssueWhiteList (r:1 w:0)
	/// Proof Skipped: CrossInOut IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cross_in() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1685`
		//  Estimated: `24349`
		// Minimum execution time: 79_308_000 picoseconds.
		Weight::from_parts(81_327_000, 24349)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: CrossInOut RegisterWhiteList (r:1 w:0)
	/// Proof Skipped: CrossInOut RegisterWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut AccountToOuterMultilocation (r:1 w:1)
	/// Proof Skipped: CrossInOut AccountToOuterMultilocation (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut OuterMultilocationToAccount (r:0 w:1)
	/// Proof Skipped: CrossInOut OuterMultilocationToAccount (max_values: None, max_size: None, mode: Measured)
	fn register_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `8189`
		// Minimum execution time: 30_904_000 picoseconds.
		Weight::from_parts(31_980_000, 8189)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut CrossingMinimumAmount (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossingMinimumAmount (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: CrossInOut AccountToOuterMultilocation (r:1 w:0)
	/// Proof Skipped: CrossInOut AccountToOuterMultilocation (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn cross_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1739`
		//  Estimated: `21962`
		// Minimum execution time: 65_936_000 picoseconds.
		Weight::from_parts(69_604_000, 21962)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut AccountToOuterMultilocation (r:1 w:1)
	/// Proof Skipped: CrossInOut AccountToOuterMultilocation (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut OuterMultilocationToAccount (r:0 w:1)
	/// Proof Skipped: CrossInOut OuterMultilocationToAccount (max_values: None, max_size: None, mode: Measured)
	fn change_outer_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `309`
		//  Estimated: `5877`
		// Minimum execution time: 30_135_000 picoseconds.
		Weight::from_parts(30_932_000, 5877)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:1)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	fn register_currency_for_cross_in_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2517`
		// Minimum execution time: 14_815_000 picoseconds.
		Weight::from_parts(15_503_000, 2517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:1)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	fn deregister_currency_for_cross_in_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `85`
		//  Estimated: `2560`
		// Minimum execution time: 16_233_000 picoseconds.
		Weight::from_parts(16_814_000, 2560)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut CrossingMinimumAmount (r:0 w:1)
	/// Proof Skipped: CrossInOut CrossingMinimumAmount (max_values: None, max_size: None, mode: Measured)
	fn set_crossing_minimum_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_905_000 picoseconds.
		Weight::from_parts(12_215_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut IssueWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2517`
		// Minimum execution time: 18_900_000 picoseconds.
		Weight::from_parts(19_951_000, 2517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut IssueWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_issue_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `2627`
		// Minimum execution time: 17_468_000 picoseconds.
		Weight::from_parts(18_221_000, 2627)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut RegisterWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut RegisterWhiteList (max_values: None, max_size: None, mode: Measured)
	fn add_to_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `2517`
		// Minimum execution time: 19_622_000 picoseconds.
		Weight::from_parts(20_253_000, 2517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut RegisterWhiteList (r:1 w:1)
	/// Proof Skipped: CrossInOut RegisterWhiteList (max_values: None, max_size: None, mode: Measured)
	fn remove_from_register_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `2627`
		// Minimum execution time: 17_760_000 picoseconds.
		Weight::from_parts(18_184_000, 2627)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut CrossingMinimumAmount (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossingMinimumAmount (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut IssueWhiteList (r:1 w:0)
	/// Proof Skipped: CrossInOut IssueWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cross_in() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1685`
		//  Estimated: `24349`
		// Minimum execution time: 79_308_000 picoseconds.
		Weight::from_parts(81_327_000, 24349)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: CrossInOut RegisterWhiteList (r:1 w:0)
	/// Proof Skipped: CrossInOut RegisterWhiteList (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut AccountToOuterMultilocation (r:1 w:1)
	/// Proof Skipped: CrossInOut AccountToOuterMultilocation (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut OuterMultilocationToAccount (r:0 w:1)
	/// Proof Skipped: CrossInOut OuterMultilocationToAccount (max_values: None, max_size: None, mode: Measured)
	fn register_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `8189`
		// Minimum execution time: 30_904_000 picoseconds.
		Weight::from_parts(31_980_000, 8189)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut CrossingMinimumAmount (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossingMinimumAmount (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: CrossInOut AccountToOuterMultilocation (r:1 w:0)
	/// Proof Skipped: CrossInOut AccountToOuterMultilocation (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn cross_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1739`
		//  Estimated: `21962`
		// Minimum execution time: 65_936_000 picoseconds.
		Weight::from_parts(69_604_000, 21962)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: CrossInOut CrossCurrencyRegistry (r:1 w:0)
	/// Proof Skipped: CrossInOut CrossCurrencyRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut AccountToOuterMultilocation (r:1 w:1)
	/// Proof Skipped: CrossInOut AccountToOuterMultilocation (max_values: None, max_size: None, mode: Measured)
	/// Storage: CrossInOut OuterMultilocationToAccount (r:0 w:1)
	/// Proof Skipped: CrossInOut OuterMultilocationToAccount (max_values: None, max_size: None, mode: Measured)
	fn change_outer_linked_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `309`
		//  Estimated: `5877`
		// Minimum execution time: 30_135_000 picoseconds.
		Weight::from_parts(30_932_000, 5877)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
