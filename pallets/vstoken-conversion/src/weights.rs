
//! Autogenerated weights for bifrost_vstoken_conversion
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_vstoken_conversion
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_vstoken_conversion.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_vstoken_conversion.
pub trait WeightInfo {
	fn set_exchange_fee() -> Weight;
	fn set_exchange_rate() -> Weight;
	fn set_relaychain_lease() -> Weight;
	fn vsbond_convert_to_vstoken() -> Weight;
	fn vstoken_convert_to_vsbond() -> Weight;
}

/// Weights for bifrost_vstoken_conversion using the Substrate node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: VstokenConversion ExchangeFee (r:1 w:1)
	/// Proof: VstokenConversion ExchangeFee (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_exchange_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `527`
		// Minimum execution time: 15_742_000 picoseconds.
		Weight::from_parts(16_561_000, 527)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: VstokenConversion ExchangeRate (r:1 w:1)
	/// Proof: VstokenConversion ExchangeRate (max_values: None, max_size: Some(14), added: 2489, mode: MaxEncodedLen)
	fn set_exchange_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `2489`
		// Minimum execution time: 15_740_000 picoseconds.
		Weight::from_parts(16_368_000, 2489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: VstokenConversion RelaychainLease (r:1 w:1)
	/// Proof: VstokenConversion RelaychainLease (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_relaychain_lease() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `499`
		// Minimum execution time: 15_055_000 picoseconds.
		Weight::from_parts(15_495_000, 499)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: VstokenConversion RelaychainLease (r:1 w:0)
	/// Proof: VstokenConversion RelaychainLease (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeRate (r:1 w:0)
	/// Proof: VstokenConversion ExchangeRate (max_values: None, max_size: Some(14), added: 2489, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeFee (r:1 w:0)
	/// Proof: VstokenConversion ExchangeFee (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:2 w:2)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn vsbond_convert_to_vstoken() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2424`
		//  Estimated: `34096`
		// Minimum execution time: 146_104_000 picoseconds.
		Weight::from_parts(149_150_000, 34096)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: VstokenConversion RelaychainLease (r:1 w:0)
	/// Proof: VstokenConversion RelaychainLease (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeRate (r:1 w:0)
	/// Proof: VstokenConversion ExchangeRate (max_values: None, max_size: Some(14), added: 2489, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeFee (r:1 w:0)
	/// Proof: VstokenConversion ExchangeFee (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn vstoken_convert_to_vsbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2415`
		//  Estimated: `31574`
		// Minimum execution time: 136_589_000 picoseconds.
		Weight::from_parts(140_518_000, 31574)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: VstokenConversion ExchangeFee (r:1 w:1)
	/// Proof: VstokenConversion ExchangeFee (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_exchange_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `527`
		// Minimum execution time: 15_742_000 picoseconds.
		Weight::from_parts(16_561_000, 527)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: VstokenConversion ExchangeRate (r:1 w:1)
	/// Proof: VstokenConversion ExchangeRate (max_values: None, max_size: Some(14), added: 2489, mode: MaxEncodedLen)
	fn set_exchange_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `2489`
		// Minimum execution time: 15_740_000 picoseconds.
		Weight::from_parts(16_368_000, 2489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: VstokenConversion RelaychainLease (r:1 w:1)
	/// Proof: VstokenConversion RelaychainLease (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_relaychain_lease() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `499`
		// Minimum execution time: 15_055_000 picoseconds.
		Weight::from_parts(15_495_000, 499)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: VstokenConversion RelaychainLease (r:1 w:0)
	/// Proof: VstokenConversion RelaychainLease (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeRate (r:1 w:0)
	/// Proof: VstokenConversion ExchangeRate (max_values: None, max_size: Some(14), added: 2489, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeFee (r:1 w:0)
	/// Proof: VstokenConversion ExchangeFee (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:2 w:2)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn vsbond_convert_to_vstoken() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2424`
		//  Estimated: `34096`
		// Minimum execution time: 146_104_000 picoseconds.
		Weight::from_parts(149_150_000, 34096)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: VstokenConversion RelaychainLease (r:1 w:0)
	/// Proof: VstokenConversion RelaychainLease (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeRate (r:1 w:0)
	/// Proof: VstokenConversion ExchangeRate (max_values: None, max_size: Some(14), added: 2489, mode: MaxEncodedLen)
	/// Storage: VstokenConversion ExchangeFee (r:1 w:0)
	/// Proof: VstokenConversion ExchangeFee (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn vstoken_convert_to_vsbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2415`
		//  Estimated: `31574`
		// Minimum execution time: 136_589_000 picoseconds.
		Weight::from_parts(140_518_000, 31574)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
}
