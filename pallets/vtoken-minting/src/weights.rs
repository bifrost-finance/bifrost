// This file is part of Bifrost.

// Copyright (C) 2019-2022 Liebi Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_vtoken_minting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `localhost`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_vtoken_minting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights2/bifrost_vtoken_minting.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bifrost_vtoken_minting.
pub trait WeightInfo {
	fn set_minimum_mint() -> Weight;
	fn set_minimum_redeem() -> Weight;
	fn set_unlock_duration() -> Weight;
	fn add_support_rebond_token() -> Weight;
	fn remove_support_rebond_token() -> Weight;
	fn set_fees() -> Weight;
	fn set_hook_iteration_limit() -> Weight;
	fn mint() -> Weight;
	fn redeem() -> Weight;
	fn rebond() -> Weight;
	fn rebond_by_unlock_id() -> Weight;
	fn on_initialize() -> Weight;
}

/// Weights for bifrost_vtoken_minting using the Bifrost node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	// Storage: VtokenMinting MinimumMint (r:1 w:1)
	fn set_minimum_mint() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting MinimumRedeem (r:1 w:1)
	fn set_minimum_redeem() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting UnlockDuration (r:1 w:1)
	fn set_unlock_duration() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	fn add_support_rebond_token() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	fn remove_support_rebond_token() -> Weight {
		(17_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting Fees (r:1 w:1)
	fn set_fees() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting HookIterationLimit (r:1 w:1)
	fn set_hook_iteration_limit() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting MinimumMint (r:1 w:0)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	fn mint() -> Weight {
		(71_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: VtokenMinting MinimumRedeem (r:1 w:0)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	// Storage: VtokenMinting UnlockDuration (r:1 w:0)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockNextId (r:1 w:1)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockLedger (r:0 w:1)
	fn redeem() -> Weight {
		(88_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	fn rebond() -> Weight {
		(81_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	fn rebond_by_unlock_id() -> Weight {
		(78_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	fn on_initialize() -> Weight {
		(6_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: VtokenMinting MinimumMint (r:1 w:1)
	fn set_minimum_mint() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting MinimumRedeem (r:1 w:1)
	fn set_minimum_redeem() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting UnlockDuration (r:1 w:1)
	fn set_unlock_duration() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	fn add_support_rebond_token() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	fn remove_support_rebond_token() -> Weight {
		(17_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting Fees (r:1 w:1)
	fn set_fees() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting HookIterationLimit (r:1 w:1)
	fn set_hook_iteration_limit() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: VtokenMinting MinimumMint (r:1 w:0)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	fn mint() -> Weight {
		(71_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: VtokenMinting MinimumRedeem (r:1 w:0)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	// Storage: VtokenMinting UnlockDuration (r:1 w:0)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockNextId (r:1 w:1)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockLedger (r:0 w:1)
	fn redeem() -> Weight {
		(88_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	fn rebond() -> Weight {
		(81_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Storage: VtokenMinting TokenUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	fn rebond_by_unlock_id() -> Weight {
		(78_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	fn on_initialize() -> Weight {
		(6_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
}
