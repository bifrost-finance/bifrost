// This file is part of Bifrost.

// Copyright (C) 2019-2022 Liebi Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_liquidity_mining
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `localhost`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_liquidity_mining
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights2/bifrost_liquidity_mining.rs
// --template=./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for bifrost_liquidity_mining.
pub trait WeightInfo {
	fn charge() -> Weight;
	fn deposit() -> Weight;
	fn redeem() -> Weight;
	fn redeem_all() -> Weight;
	fn volunteer_to_redeem() -> Weight;
	fn claim() -> Weight;
	fn unlock() -> Weight;
	fn cancel_unlock() -> Weight;
}

/// Weights for bifrost_liquidity_mining using the Bifrost node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining ChargedPoolIds (r:1 w:1)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn charge() -> Weight {
		(71_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:1 w:1)
	fn deposit() -> Weight {
		(77_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:2 w:1)
	fn redeem() -> Weight {
		(131_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:2 w:1)
	fn redeem_all() -> Weight {
		(130_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:2 w:1)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:2 w:1)
	fn volunteer_to_redeem() -> Weight {
		(138_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn claim() -> Weight {
		(72_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:4)
	// Storage: System Account (r:2 w:1)
	fn unlock() -> Weight {
		(90_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	fn cancel_unlock() -> Weight {
		(31_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining ChargedPoolIds (r:1 w:1)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn charge() -> Weight {
		(71_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:1 w:1)
	fn deposit() -> Weight {
		(77_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:2 w:1)
	fn redeem() -> Weight {
		(131_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:2 w:1)
	fn redeem_all() -> Weight {
		(130_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:2 w:1)
	// Storage: Tokens Accounts (r:7 w:6)
	// Storage: System Account (r:2 w:1)
	fn volunteer_to_redeem() -> Weight {
		(138_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn claim() -> Weight {
		(72_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:4)
	// Storage: System Account (r:2 w:1)
	fn unlock() -> Weight {
		(90_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: LiquidityMining PalletVersion (r:1 w:0)
	// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	fn cancel_unlock() -> Weight {
		(31_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
