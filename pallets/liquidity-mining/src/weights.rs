// This file is part of Bifrost.

// Copyright (C) 2019-2022 Liebi Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_liquidity_mining
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `VM-16-3-ubuntu`, CPU: `Intel(R) Xeon(R) Platinum 8374C CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_liquidity_mining
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./weight.rs
// --template
// ./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for bifrost_liquidity_mining.
pub trait WeightInfo {
	fn charge() -> Weight;
	fn deposit() -> Weight;
	fn redeem() -> Weight;
	fn redeem_all() -> Weight;
	fn volunteer_to_redeem() -> Weight;
	fn claim() -> Weight;
	fn unlock() -> Weight;
	fn cancel_unlock() -> Weight;
	fn create_single_token_pool() -> Weight;
	fn create_mining_pool() -> Weight;
	fn create_farming_pool() -> Weight;
	fn create_eb_farming_pool() -> Weight;
	fn kill_pool() -> Weight;
	fn force_retire_pool() -> Weight;
	fn edit_pool() -> Weight;
}

/// Weights for bifrost_liquidity_mining using the Bifrost node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining ChargedPoolIds (r:1 w:1)
	/// Proof Skipped: LiquidityMining ChargedPoolIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn charge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2124`
		//  Estimated: `24700`
		// Minimum execution time: 130_990_000 picoseconds.
		Weight::from_parts(136_296_000, 24700)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2317`
		//  Estimated: `32638`
		// Minimum execution time: 137_455_000 picoseconds.
		Weight::from_parts(140_495_000, 32638)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:7 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2824`
		//  Estimated: `45048`
		// Minimum execution time: 238_840_000 picoseconds.
		Weight::from_parts(242_168_000, 45048)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:7 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn redeem_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2824`
		//  Estimated: `45048`
		// Minimum execution time: 239_198_000 picoseconds.
		Weight::from_parts(244_439_000, 45048)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:2 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:7 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn volunteer_to_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2824`
		//  Estimated: `47523`
		// Minimum execution time: 249_822_000 picoseconds.
		Weight::from_parts(254_785_000, 47523)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2548`
		//  Estimated: `28376`
		// Minimum execution time: 134_742_000 picoseconds.
		Weight::from_parts(139_502_000, 28376)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:5 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2655`
		//  Estimated: `39186`
		// Minimum execution time: 147_474_000 picoseconds.
		Weight::from_parts(151_089_000, 39186)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn cancel_unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1204`
		//  Estimated: `12736`
		// Minimum execution time: 45_922_000 picoseconds.
		Weight::from_parts(47_444_000, 12736)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_single_token_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 27_190_000 picoseconds.
		Weight::from_parts(28_065_000, 4716)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_mining_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 27_081_000 picoseconds.
		Weight::from_parts(27_489_000, 4716)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 26_736_000 picoseconds.
		Weight::from_parts(27_899_000, 4716)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_eb_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 27_158_000 picoseconds.
		Weight::from_parts(27_451_000, 4716)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn kill_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `2810`
		// Minimum execution time: 19_888_000 picoseconds.
		Weight::from_parts(20_629_000, 2810)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining ChargedPoolIds (r:1 w:1)
	/// Proof Skipped: LiquidityMining ChargedPoolIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn force_retire_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2051`
		//  Estimated: `24465`
		// Minimum execution time: 149_648_000 picoseconds.
		Weight::from_parts(151_817_000, 24465)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn edit_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `2810`
		// Minimum execution time: 20_474_000 picoseconds.
		Weight::from_parts(21_266_000, 2810)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining ChargedPoolIds (r:1 w:1)
	/// Proof Skipped: LiquidityMining ChargedPoolIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn charge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2124`
		//  Estimated: `24700`
		// Minimum execution time: 130_990_000 picoseconds.
		Weight::from_parts(136_296_000, 24700)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2317`
		//  Estimated: `32638`
		// Minimum execution time: 137_455_000 picoseconds.
		Weight::from_parts(140_495_000, 32638)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:7 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2824`
		//  Estimated: `45048`
		// Minimum execution time: 238_840_000 picoseconds.
		Weight::from_parts(242_168_000, 45048)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:7 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn redeem_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2824`
		//  Estimated: `45048`
		// Minimum execution time: 239_198_000 picoseconds.
		Weight::from_parts(244_439_000, 45048)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:2 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:7 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn volunteer_to_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2824`
		//  Estimated: `47523`
		// Minimum execution time: 249_822_000 picoseconds.
		Weight::from_parts(254_785_000, 47523)
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2548`
		//  Estimated: `28376`
		// Minimum execution time: 134_742_000 picoseconds.
		Weight::from_parts(139_502_000, 28376)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:5 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2655`
		//  Estimated: `39186`
		// Minimum execution time: 147_474_000 picoseconds.
		Weight::from_parts(151_089_000, 39186)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: LiquidityMining PalletVersion (r:1 w:0)
	/// Proof Skipped: LiquidityMining PalletVersion (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalDepositDataV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalDepositDataV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn cancel_unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1204`
		//  Estimated: `12736`
		// Minimum execution time: 45_922_000 picoseconds.
		Weight::from_parts(47_444_000, 12736)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_single_token_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 27_190_000 picoseconds.
		Weight::from_parts(28_065_000, 4716)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_mining_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 27_081_000 picoseconds.
		Weight::from_parts(27_489_000, 4716)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 26_736_000 picoseconds.
		Weight::from_parts(27_899_000, 4716)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining NextPoolId (r:1 w:1)
	/// Proof Skipped: LiquidityMining NextPoolId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:0 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn create_eb_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4716`
		// Minimum execution time: 27_158_000 picoseconds.
		Weight::from_parts(27_451_000, 4716)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn kill_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `2810`
		// Minimum execution time: 19_888_000 picoseconds.
		Weight::from_parts(20_629_000, 2810)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	/// Storage: LiquidityMining ChargedPoolIds (r:1 w:1)
	/// Proof Skipped: LiquidityMining ChargedPoolIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn force_retire_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2051`
		//  Estimated: `24465`
		// Minimum execution time: 149_648_000 picoseconds.
		Weight::from_parts(151_817_000, 24465)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: LiquidityMining TotalPoolInfosV200 (r:1 w:1)
	/// Proof Skipped: LiquidityMining TotalPoolInfosV200 (max_values: None, max_size: None, mode: Measured)
	fn edit_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `2810`
		// Minimum execution time: 20_474_000 picoseconds.
		Weight::from_parts(21_266_000, 2810)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
