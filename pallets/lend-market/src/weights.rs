// This file is part of Parallel Finance.

// Copyright (C) 2022 Parallel Finance Developer.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_loans
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-30, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kerria-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parallel
// benchmark
// pallet
// --chain=kerria-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet-loans
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/loans/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for loans.
pub trait WeightInfo {
	fn add_market() -> Weight;
	fn activate_market() -> Weight;
	fn update_rate_model() -> Weight;
	fn update_market() -> Weight;
	fn force_update_market() -> Weight;
	fn add_reward() -> Weight;
	fn update_market_reward_speed() -> Weight;
	fn claim_reward(n: u32, ) -> Weight;
	fn claim_reward_for_market() -> Weight;
	fn mint() -> Weight;
	fn borrow() -> Weight;
	fn redeem() -> Weight;
	fn redeem_all() -> Weight;
	fn repay_borrow() -> Weight;
	fn repay_borrow_all() -> Weight;
	fn liquidate_borrow() -> Weight;
	fn add_reserves() -> Weight;
	fn reduce_reserves() -> Weight;
	fn withdraw_missing_reward() -> Weight;
	fn collateral_asset() -> Weight;
	fn update_liquidation_free_collateral(n: u32, ) -> Weight;
}

/// Weights for loans using the Substrate node and recommended hardware.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: `LendMarket::Markets` (r:2 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::UnderlyingAssetId` (r:1 w:1)
	/// Proof: `LendMarket::UnderlyingAssetId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::ExchangeRate` (r:0 w:1)
	/// Proof: `LendMarket::ExchangeRate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:0 w:1)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `6049`
		// Minimum execution time: 29_526_000 picoseconds.
		Weight::from_parts(29_946_000, 0)
			.saturating_add(Weight::from_parts(0, 6049))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn activate_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `3844`
		// Minimum execution time: 19_587_000 picoseconds.
		Weight::from_parts(19_998_000, 0)
			.saturating_add(Weight::from_parts(0, 3844))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_rate_model() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `3844`
		// Minimum execution time: 21_500_000 picoseconds.
		Weight::from_parts(21_801_000, 0)
			.saturating_add(Weight::from_parts(0, 3844))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn add_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `6196`
		// Minimum execution time: 69_972_000 picoseconds.
		Weight::from_parts(70_544_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `3844`
		// Minimum execution time: 22_432_000 picoseconds.
		Weight::from_parts(22_633_000, 0)
			.saturating_add(Weight::from_parts(0, 3844))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `LendMarket::UnderlyingAssetId` (r:1 w:1)
	/// Proof: `LendMarket::UnderlyingAssetId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_update_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
		//  Estimated: `3852`
		// Minimum execution time: 30_087_000 picoseconds.
		Weight::from_parts(30_378_000, 0)
			.saturating_add(Weight::from_parts(0, 3852))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_missing_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206`
		//  Estimated: `6196`
		// Minimum execution time: 61_206_000 picoseconds.
		Weight::from_parts(61_637_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_market_reward_speed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
		//  Estimated: `6327`
		// Minimum execution time: 44_244_000 picoseconds.
		Weight::from_parts(44_735_000, 0)
			.saturating_add(Weight::from_parts(0, 6327))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `LendMarket::Markets` (r:3 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:2 w:2)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:2 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:2 w:2)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:2 w:0)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:2 w:2)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:2 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:2 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:2 w:2)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:2 w:0)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 2]`.
	fn claim_reward(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1072 + n * (100 ±0)`
		//  Estimated: `6196 + n * (2575 ±0)`
		// Minimum execution time: 150_596_000 picoseconds.
		Weight::from_parts(102_946_100, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			// Standard Error: 172_321
			.saturating_add(Weight::from_parts(50_030_400, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((10_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2575).saturating_mul(n.into()))
	}
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:0)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:0)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_reward_for_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1135`
		//  Estimated: `6196`
		// Minimum execution time: 143_321_000 picoseconds.
		Weight::from_parts(143_993_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:1)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountEarned` (r:1 w:1)
	/// Proof: `LendMarket::AccountEarned` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `915`
		//  Estimated: `6855`
		// Minimum execution time: 138_573_000 picoseconds.
		Weight::from_parts(140_256_000, 0)
			.saturating_add(Weight::from_parts(0, 6855))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Prices::EmergencyPrice` (r:1 w:0)
	/// Proof: `Prices::EmergencyPrice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:0)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::LiquidationFreeCollaterals` (r:1 w:0)
	/// Proof: `LendMarket::LiquidationFreeCollaterals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1778`
		//  Estimated: `7718`
		// Minimum execution time: 190_240_000 picoseconds.
		Weight::from_parts(192_134_000, 0)
			.saturating_add(Weight::from_parts(0, 7718))
			.saturating_add(T::DbWeight::get().reads(20))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:1)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:3 w:3)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountEarned` (r:1 w:1)
	/// Proof: `LendMarket::AccountEarned` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1789`
		//  Estimated: `8769`
		// Minimum execution time: 217_011_000 picoseconds.
		Weight::from_parts(218_233_000, 0)
			.saturating_add(Weight::from_parts(0, 8769))
			.saturating_add(T::DbWeight::get().reads(19))
			.saturating_add(T::DbWeight::get().writes(12))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:1)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountEarned` (r:1 w:1)
	/// Proof: `LendMarket::AccountEarned` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redeem_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1687`
		//  Estimated: `7627`
		// Minimum execution time: 174_661_000 picoseconds.
		Weight::from_parts(175_633_000, 0)
			.saturating_add(Weight::from_parts(0, 7627))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn repay_borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1651`
		//  Estimated: `7591`
		// Minimum execution time: 125_017_000 picoseconds.
		Weight::from_parts(126_169_000, 0)
			.saturating_add(Weight::from_parts(0, 7591))
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn repay_borrow_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1651`
		//  Estimated: `7591`
		// Minimum execution time: 139_484_000 picoseconds.
		Weight::from_parts(140_927_000, 0)
			.saturating_add(Weight::from_parts(0, 7591))
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn collateral_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562`
		//  Estimated: `6502`
		// Minimum execution time: 44_795_000 picoseconds.
		Weight::from_parts(45_426_000, 0)
			.saturating_add(Weight::from_parts(0, 6502))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `LendMarket::LiquidationFreeCollaterals` (r:1 w:0)
	/// Proof: `LendMarket::LiquidationFreeCollaterals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:2 w:2)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::Markets` (r:3 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:3 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Prices::EmergencyPrice` (r:2 w:0)
	/// Proof: `Prices::EmergencyPrice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:2 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:4 w:3)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:3 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:2 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:3 w:3)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:3 w:3)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn liquidate_borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2687`
		//  Estimated: `13577`
		// Minimum execution time: 375_001_000 picoseconds.
		Weight::from_parts(379_198_000, 0)
			.saturating_add(Weight::from_parts(0, 13577))
			.saturating_add(T::DbWeight::get().reads(39))
			.saturating_add(T::DbWeight::get().writes(18))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:1)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_reserves() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `843`
		//  Estimated: `6783`
		// Minimum execution time: 77_206_000 picoseconds.
		Weight::from_parts(77_888_000, 0)
			.saturating_add(Weight::from_parts(0, 6783))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:1)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:3 w:3)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn reduce_reserves() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1216`
		//  Estimated: `8769`
		// Minimum execution time: 122_883_000 picoseconds.
		Weight::from_parts(123_564_000, 0)
			.saturating_add(Weight::from_parts(0, 8769))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `LendMarket::LiquidationFreeCollaterals` (r:1 w:1)
	/// Proof: `LendMarket::LiquidationFreeCollaterals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 10]`.
	fn update_liquidation_free_collateral(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 16_260_000 picoseconds.
		Weight::from_parts(16_942_631, 0)
			.saturating_add(Weight::from_parts(0, 1594))
			// Standard Error: 2_095
			.saturating_add(Weight::from_parts(117_362, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}


// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `LendMarket::Markets` (r:2 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::UnderlyingAssetId` (r:1 w:1)
	/// Proof: `LendMarket::UnderlyingAssetId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::ExchangeRate` (r:0 w:1)
	/// Proof: `LendMarket::ExchangeRate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:0 w:1)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `6049`
		// Minimum execution time: 29_526_000 picoseconds.
		Weight::from_parts(29_946_000, 0)
			.saturating_add(Weight::from_parts(0, 6049))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn activate_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `3844`
		// Minimum execution time: 19_587_000 picoseconds.
		Weight::from_parts(19_998_000, 0)
			.saturating_add(Weight::from_parts(0, 3844))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_rate_model() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `3844`
		// Minimum execution time: 21_500_000 picoseconds.
		Weight::from_parts(21_801_000, 0)
			.saturating_add(Weight::from_parts(0, 3844))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn add_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `6196`
		// Minimum execution time: 69_972_000 picoseconds.
		Weight::from_parts(70_544_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `3844`
		// Minimum execution time: 22_432_000 picoseconds.
		Weight::from_parts(22_633_000, 0)
			.saturating_add(Weight::from_parts(0, 3844))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `LendMarket::UnderlyingAssetId` (r:1 w:1)
	/// Proof: `LendMarket::UnderlyingAssetId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::Markets` (r:1 w:1)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_update_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
		//  Estimated: `3852`
		// Minimum execution time: 30_087_000 picoseconds.
		Weight::from_parts(30_378_000, 0)
			.saturating_add(Weight::from_parts(0, 3852))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_missing_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206`
		//  Estimated: `6196`
		// Minimum execution time: 61_206_000 picoseconds.
		Weight::from_parts(61_637_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_market_reward_speed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
		//  Estimated: `6327`
		// Minimum execution time: 44_244_000 picoseconds.
		Weight::from_parts(44_735_000, 0)
			.saturating_add(Weight::from_parts(0, 6327))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: `LendMarket::Markets` (r:3 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:2 w:2)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:2 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:2 w:2)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:2 w:0)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:2 w:2)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:2 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:2 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:2 w:2)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:2 w:0)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 2]`.
	fn claim_reward(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1072 + n * (100 ±0)`
		//  Estimated: `6196 + n * (2575 ±0)`
		// Minimum execution time: 150_596_000 picoseconds.
		Weight::from_parts(102_946_100, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			// Standard Error: 172_321
			.saturating_add(Weight::from_parts(50_030_400, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((10_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2575).saturating_mul(n.into()))
	}
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:0)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:0)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_reward_for_market() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1135`
		//  Estimated: `6196`
		// Minimum execution time: 143_321_000 picoseconds.
		Weight::from_parts(143_993_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(14))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:1)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountEarned` (r:1 w:1)
	/// Proof: `LendMarket::AccountEarned` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `915`
		//  Estimated: `6855`
		// Minimum execution time: 138_573_000 picoseconds.
		Weight::from_parts(140_256_000, 0)
			.saturating_add(Weight::from_parts(0, 6855))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(10))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Prices::EmergencyPrice` (r:1 w:0)
	/// Proof: `Prices::EmergencyPrice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:0)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::LiquidationFreeCollaterals` (r:1 w:0)
	/// Proof: `LendMarket::LiquidationFreeCollaterals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1778`
		//  Estimated: `7718`
		// Minimum execution time: 190_240_000 picoseconds.
		Weight::from_parts(192_134_000, 0)
			.saturating_add(Weight::from_parts(0, 7718))
			.saturating_add(RocksDbWeight::get().reads(20))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:1)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:3 w:3)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountEarned` (r:1 w:1)
	/// Proof: `LendMarket::AccountEarned` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1789`
		//  Estimated: `8769`
		// Minimum execution time: 217_011_000 picoseconds.
		Weight::from_parts(218_233_000, 0)
			.saturating_add(Weight::from_parts(0, 8769))
			.saturating_add(RocksDbWeight::get().reads(19))
			.saturating_add(RocksDbWeight::get().writes(12))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:1)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:0)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountEarned` (r:1 w:1)
	/// Proof: `LendMarket::AccountEarned` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redeem_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1687`
		//  Estimated: `7627`
		// Minimum execution time: 174_661_000 picoseconds.
		Weight::from_parts(175_633_000, 0)
			.saturating_add(Weight::from_parts(0, 7627))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(10))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn repay_borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1651`
		//  Estimated: `7591`
		// Minimum execution time: 125_017_000 picoseconds.
		Weight::from_parts(126_169_000, 0)
			.saturating_add(Weight::from_parts(0, 7591))
			.saturating_add(RocksDbWeight::get().reads(14))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:1 w:1)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:1 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:1 w:1)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalBorrows` (r:1 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn repay_borrow_all() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1651`
		//  Estimated: `7591`
		// Minimum execution time: 139_484_000 picoseconds.
		Weight::from_parts(140_927_000, 0)
			.saturating_add(Weight::from_parts(0, 7591))
			.saturating_add(RocksDbWeight::get().reads(14))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:1 w:1)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn collateral_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562`
		//  Estimated: `6502`
		// Minimum execution time: 44_795_000 picoseconds.
		Weight::from_parts(45_426_000, 0)
			.saturating_add(Weight::from_parts(0, 6502))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `LendMarket::LiquidationFreeCollaterals` (r:1 w:0)
	/// Proof: `LendMarket::LiquidationFreeCollaterals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::LastAccruedInterestTime` (r:2 w:2)
	/// Proof: `LendMarket::LastAccruedInterestTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::Markets` (r:3 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountBorrows` (r:3 w:1)
	/// Proof: `LendMarket::AccountBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::BorrowIndex` (r:1 w:0)
	/// Proof: `LendMarket::BorrowIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Prices::EmergencyPrice` (r:2 w:0)
	/// Proof: `Prices::EmergencyPrice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:2 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::AccountDeposits` (r:4 w:3)
	/// Proof: `LendMarket::AccountDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalSupply` (r:1 w:0)
	/// Proof: `LendMarket::TotalSupply` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:3 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalBorrows` (r:2 w:1)
	/// Proof: `LendMarket::TotalBorrows` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:0)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowState` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowSpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardBorrowSpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardBorrowerIndex` (r:1 w:1)
	/// Proof: `LendMarket::RewardBorrowerIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardAccured` (r:3 w:3)
	/// Proof: `LendMarket::RewardAccured` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplyState` (r:1 w:1)
	/// Proof: `LendMarket::RewardSupplyState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplySpeed` (r:1 w:0)
	/// Proof: `LendMarket::RewardSupplySpeed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::RewardSupplierIndex` (r:3 w:3)
	/// Proof: `LendMarket::RewardSupplierIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn liquidate_borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2687`
		//  Estimated: `13577`
		// Minimum execution time: 375_001_000 picoseconds.
		Weight::from_parts(379_198_000, 0)
			.saturating_add(Weight::from_parts(0, 13577))
			.saturating_add(RocksDbWeight::get().reads(39))
			.saturating_add(RocksDbWeight::get().writes(18))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:1)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_reserves() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `843`
		//  Estimated: `6783`
		// Minimum execution time: 77_206_000 picoseconds.
		Weight::from_parts(77_888_000, 0)
			.saturating_add(Weight::from_parts(0, 6783))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: `LendMarket::Markets` (r:2 w:0)
	/// Proof: `LendMarket::Markets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendMarket::TotalReserves` (r:1 w:1)
	/// Proof: `LendMarket::TotalReserves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:3 w:3)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::CurrencyMetadatas` (r:1 w:0)
	/// Proof: `AssetRegistry::CurrencyMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn reduce_reserves() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1216`
		//  Estimated: `8769`
		// Minimum execution time: 122_883_000 picoseconds.
		Weight::from_parts(123_564_000, 0)
			.saturating_add(Weight::from_parts(0, 8769))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	/// Storage: `LendMarket::LiquidationFreeCollaterals` (r:1 w:1)
	/// Proof: `LendMarket::LiquidationFreeCollaterals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 10]`.
	fn update_liquidation_free_collateral(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 16_260_000 picoseconds.
		Weight::from_parts(16_942_631, 0)
			.saturating_add(Weight::from_parts(0, 1594))
			// Standard Error: 2_095
			.saturating_add(Weight::from_parts(117_362, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
