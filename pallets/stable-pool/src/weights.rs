// This file is part of Bifrost.

// Copyright (C) 2019-2022 Liebi Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `bifrost_stable_pool`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yml`, CPU: `AMD Ryzen 9 3950X 16-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --pallet=bifrost_stable_pool
// --extrinsic=*
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./bifrost_stable_pool.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight,constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn create_pool() -> Weight;
	fn edit_token_rate() -> Weight;
	fn add_liquidity() -> Weight;
	fn swap() -> Weight;
	fn redeem_proportion() -> Weight;
	fn redeem_single() -> Weight;
	fn redeem_multi() -> Weight;
	fn modify_a() -> Weight;
	fn modify_fees() -> Weight;
	fn modify_recipients() -> Weight;
}

/// Weight functions for `bifrost_stable_pool`.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BifrostWeight<T> {
	/// Storage: StableAsset PoolCount (r:1 w:1)
	/// Proof Skipped: StableAsset PoolCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn create_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `3593`
		// Minimum execution time: 15_640_000 picoseconds.
		Weight::from_parts(16_071_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: StableAsset TokenRateCaches (r:1 w:1)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	fn edit_token_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218`
		//  Estimated: `3683`
		// Minimum execution time: 5_611_000 picoseconds.
		Weight::from_parts(5_771_000, 0)
			.saturating_add(Weight::from_parts(0, 3683))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:2 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn add_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2547`
		//  Estimated: `11362`
		// Minimum execution time: 103_185_000 picoseconds.
		Weight::from_parts(104_127_000, 0)
			.saturating_add(Weight::from_parts(0, 11362))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2290`
		//  Estimated: `6196`
		// Minimum execution time: 80_553_000 picoseconds.
		Weight::from_parts(81_855_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn redeem_proportion() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2150`
		//  Estimated: `6176`
		// Minimum execution time: 74_020_000 picoseconds.
		Weight::from_parts(74_441_000, 0)
			.saturating_add(Weight::from_parts(0, 6176))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn redeem_single() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2150`
		//  Estimated: `6176`
		// Minimum execution time: 69_101_000 picoseconds.
		Weight::from_parts(69_772_000, 0)
			.saturating_add(Weight::from_parts(0, 6176))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn redeem_multi() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2150`
		//  Estimated: `6176`
		// Minimum execution time: 73_369_000 picoseconds.
		Weight::from_parts(73_981_000, 0)
			.saturating_add(Weight::from_parts(0, 6176))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	fn modify_a() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 12_844_000 picoseconds.
		Weight::from_parts(13_365_000, 0)
			.saturating_add(Weight::from_parts(0, 3908))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	fn modify_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 12_534_000 picoseconds.
		Weight::from_parts(12_714_000, 0)
			.saturating_add(Weight::from_parts(0, 3908))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	fn modify_recipients() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 12_323_000 picoseconds.
		Weight::from_parts(12_704_000, 0)
			.saturating_add(Weight::from_parts(0, 3908))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	/// Storage: StableAsset PoolCount (r:1 w:1)
	/// Proof Skipped: StableAsset PoolCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn create_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `3593`
		// Minimum execution time: 15_640_000 picoseconds.
		Weight::from_parts(16_071_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: StableAsset TokenRateCaches (r:1 w:1)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	fn edit_token_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218`
		//  Estimated: `3683`
		// Minimum execution time: 5_611_000 picoseconds.
		Weight::from_parts(5_771_000, 0)
			.saturating_add(Weight::from_parts(0, 3683))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:2 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:2 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn add_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2547`
		//  Estimated: `11362`
		// Minimum execution time: 103_185_000 picoseconds.
		Weight::from_parts(104_127_000, 0)
			.saturating_add(Weight::from_parts(0, 11362))
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2290`
		//  Estimated: `6196`
		// Minimum execution time: 80_553_000 picoseconds.
		Weight::from_parts(81_855_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn redeem_proportion() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2150`
		//  Estimated: `6176`
		// Minimum execution time: 74_020_000 picoseconds.
		Weight::from_parts(74_441_000, 0)
			.saturating_add(Weight::from_parts(0, 6176))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn redeem_single() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2150`
		//  Estimated: `6176`
		// Minimum execution time: 69_101_000 picoseconds.
		Weight::from_parts(69_772_000, 0)
			.saturating_add(Weight::from_parts(0, 6176))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: StableAsset TokenRateCaches (r:1 w:0)
	/// Proof Skipped: StableAsset TokenRateCaches (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	/// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn redeem_multi() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2150`
		//  Estimated: `6176`
		// Minimum execution time: 73_369_000 picoseconds.
		Weight::from_parts(73_981_000, 0)
			.saturating_add(Weight::from_parts(0, 6176))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	fn modify_a() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 12_844_000 picoseconds.
		Weight::from_parts(13_365_000, 0)
			.saturating_add(Weight::from_parts(0, 3908))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	fn modify_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 12_534_000 picoseconds.
		Weight::from_parts(12_714_000, 0)
			.saturating_add(Weight::from_parts(0, 3908))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: StableAsset Pools (r:1 w:1)
	/// Proof Skipped: StableAsset Pools (max_values: None, max_size: None, mode: Measured)
	fn modify_recipients() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 12_323_000 picoseconds.
		Weight::from_parts(12_704_000, 0)
			.saturating_add(Weight::from_parts(0, 3908))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
