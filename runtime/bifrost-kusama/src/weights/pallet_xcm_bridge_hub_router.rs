// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//! Autogenerated weights for `pallet_xcm_bridge_hub_router`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./asset-hub-kusama-chain-spec.json")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=./asset-hub-kusama-chain-spec.json
// --steps=50
// --repeat=20
// --pallet=pallet_xcm_bridge_hub_router
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./asset-hub-kusama-weights/
// --header=./file_header.txt

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_xcm_bridge_hub_router`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_xcm_bridge_hub_router::WeightInfo for WeightInfo<T> {
    /// Storage: `XcmpQueue::InboundXcmpSuspended` (r:1 w:0)
    /// Proof: `XcmpQueue::InboundXcmpSuspended` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:0)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ToPolkadotXcmRouter::Bridge` (r:1 w:1)
    /// Proof: `ToPolkadotXcmRouter::Bridge` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
    fn on_initialize_when_non_congested() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `159`
        //  Estimated: `1644`
        // Minimum execution time: 8_311_000 picoseconds.
        Weight::from_parts(8_757_000, 0)
            .saturating_add(Weight::from_parts(0, 1644))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `XcmpQueue::InboundXcmpSuspended` (r:1 w:0)
    /// Proof: `XcmpQueue::InboundXcmpSuspended` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:0)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn on_initialize_when_congested() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `111`
        //  Estimated: `1596`
        // Minimum execution time: 4_314_000 picoseconds.
        Weight::from_parts(4_561_000, 0)
            .saturating_add(Weight::from_parts(0, 1596))
            .saturating_add(T::DbWeight::get().reads(2))
    }
    /// Storage: `ToPolkadotXcmRouter::Bridge` (r:1 w:1)
    /// Proof: `ToPolkadotXcmRouter::Bridge` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
    fn report_bridge_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `83`
        //  Estimated: `1502`
        // Minimum execution time: 9_784_000 picoseconds.
        Weight::from_parts(10_125_000, 0)
            .saturating_add(Weight::from_parts(0, 1502))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `PolkadotXcm::SupportedVersion` (r:2 w:0)
    /// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: UNKNOWN KEY `0x3302afcb67e838a3f960251b417b9a4f` (r:1 w:0)
    /// Proof: UNKNOWN KEY `0x3302afcb67e838a3f960251b417b9a4f` (r:1 w:0)
    /// Storage: UNKNOWN KEY `0x0973fe64c85043ba1c965cbc38eb63c7` (r:1 w:0)
    /// Proof: UNKNOWN KEY `0x0973fe64c85043ba1c965cbc38eb63c7` (r:1 w:0)
    /// Storage: `ToPolkadotXcmRouter::Bridge` (r:1 w:1)
    /// Proof: `ToPolkadotXcmRouter::Bridge` (`max_values`: Some(1), `max_size`: Some(17), added: 512, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `XcmpQueue::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `PolkadotXcm::VersionDiscoveryQueue` (r:1 w:1)
    /// Proof: `PolkadotXcm::VersionDiscoveryQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `PolkadotXcm::SafeXcmVersion` (r:1 w:0)
    /// Proof: `PolkadotXcm::SafeXcmVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::RelevantMessagingState` (r:1 w:0)
    /// Proof: `ParachainSystem::RelevantMessagingState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:1)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `XcmpQueue::InboundXcmpSuspended` (r:1 w:0)
    /// Proof: `XcmpQueue::InboundXcmpSuspended` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `XcmpQueue::OutboundXcmpMessages` (r:0 w:1)
    /// Proof: `XcmpQueue::OutboundXcmpMessages` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn send_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `6393`
        // Minimum execution time: 48_098_000 picoseconds.
        Weight::from_parts(49_374_000, 0)
            .saturating_add(Weight::from_parts(0, 6393))
            .saturating_add(T::DbWeight::get().reads(12))
            .saturating_add(T::DbWeight::get().writes(4))
    }
}