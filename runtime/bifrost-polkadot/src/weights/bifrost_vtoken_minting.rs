// This file is part of Bifrost.

// Copyright (C) Liebi Technologies PTE. LTD.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for bifrost_vtoken_minting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bifrost-jenkins`, CPU: `Intel(R) Xeon(R) CPU E5-26xx v4`
//! WASM-EXECUTION: Compiled, CHAIN: Some("bifrost-kusama-local"), DB CACHE: 1024

// Executed Command:
// target/release/bifrost
// benchmark
// pallet
// --chain=bifrost-kusama-local
// --steps=50
// --repeat=20
// --pallet=bifrost_vtoken_minting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/bifrost-kusama/src/weights/bifrost_vtoken_minting.rs
// --template=./weight-template/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for bifrost_vtoken_minting.
pub struct BifrostWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> bifrost_vtoken_minting::WeightInfo for BifrostWeight<T> {
	// Storage: VtokenMinting MinimumMint (r:1 w:1)
	// Proof: VtokenMinting MinimumMint (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn set_minimum_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `732`
		//  Estimated: `4197`
		// Minimum execution time: 47_604 nanoseconds.
		Weight::from_parts(48_620_000, 4197)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VtokenMinting MinimumRedeem (r:1 w:1)
	// Proof: VtokenMinting MinimumRedeem (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn set_minimum_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `3503`
		// Minimum execution time: 31_648 nanoseconds.
		Weight::from_parts(33_004_000, 3503)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VtokenMinting UnlockDuration (r:1 w:1)
	// Proof: VtokenMinting UnlockDuration (max_values: None, max_size: Some(27), added: 2502, mode: MaxEncodedLen)
	fn set_unlock_duration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `3492`
		// Minimum execution time: 32_605 nanoseconds.
		Weight::from_parts(33_244_000, 3492)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VtokenMinting::UnlockingTotal` (r:1 w:1)
	/// Proof: `VtokenMinting::UnlockingTotal` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
	fn set_unlocking_total() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `3503`
		// Minimum execution time: 14_808_000 picoseconds.
		Weight::from_parts(15_209_000, 0)
			.saturating_add(Weight::from_parts(0, 3503))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VtokenMinting::MinTimeUnit` (r:1 w:1)
	/// Proof: `VtokenMinting::MinTimeUnit` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	fn set_min_time_unit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `3492`
		// Minimum execution time: 15_269_000 picoseconds.
		Weight::from_parts(15_499_000, 0)
			.saturating_add(Weight::from_parts(0, 3492))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VtokenMinting::OngoingTimeUnit` (r:1 w:1)
	/// Proof: `VtokenMinting::OngoingTimeUnit` (`max_values`: None, `max_size`: Some(27), added: 2502, mode: `MaxEncodedLen`)
	fn recreate_currency_ongoing_time_unit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `3492`
		// Minimum execution time: 15_209_000 picoseconds.
		Weight::from_parts(15_509_000, 0)
			.saturating_add(Weight::from_parts(0, 3492))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Proof: VtokenMinting TokenToRebond (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn add_support_rebond_token() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `3503`
		// Minimum execution time: 33_236 nanoseconds.
		Weight::from_parts(34_638_000, 3503)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Proof: VtokenMinting TokenToRebond (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	fn remove_support_rebond_token() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230`
		//  Estimated: `3503`
		// Minimum execution time: 36_978 nanoseconds.
		Weight::from_parts(38_593_000, 3503)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VtokenMinting Fees (r:1 w:1)
	// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn set_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `1493`
		// Minimum execution time: 30_702 nanoseconds.
		Weight::from_parts(31_421_000, 1493)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VtokenMinting HookIterationLimit (r:1 w:1)
	// Proof: VtokenMinting HookIterationLimit (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_hook_iteration_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `1489`
		// Minimum execution time: 28_783 nanoseconds.
		Weight::from_parts(30_913_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VtokenMinting MinimumMint (r:1 w:0)
	// Proof: VtokenMinting MinimumMint (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:3 w:3)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2041`
		//  Estimated: `8769`
		// Minimum execution time: 204_920 nanoseconds.
		Weight::from_parts(207_086_000, 8769)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: VtokenMinting MinimumRedeem (r:1 w:0)
	// Proof: VtokenMinting MinimumRedeem (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: Slp DelegationsOccupied (r:1 w:0)
	// Proof Skipped: Slp DelegationsOccupied (max_values: None, max_size: None, mode: Measured)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	// Proof: VtokenMinting OngoingTimeUnit (max_values: None, max_size: Some(27), added: 2502, mode: MaxEncodedLen)
	// Storage: VtokenMinting UnlockDuration (r:1 w:0)
	// Proof: VtokenMinting UnlockDuration (max_values: None, max_size: Some(27), added: 2502, mode: MaxEncodedLen)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Proof: VtokenMinting UnlockingTotal (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenUnlockNextId (r:1 w:1)
	// Proof: VtokenMinting TokenUnlockNextId (max_values: None, max_size: Some(26), added: 2501, mode: MaxEncodedLen)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting UserUnlockLedger (max_values: None, max_size: Some(135), added: 2610, mode: MaxEncodedLen)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting TimeUnitUnlockLedger (max_values: None, max_size: Some(282), added: 2757, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenUnlockLedger (r:0 w:1)
	// Proof: VtokenMinting TokenUnlockLedger (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2187`
		//  Estimated: `6176`
		// Minimum execution time: 244_947 nanoseconds.
		Weight::from_parts(249_155_000, 6176)
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Proof: VtokenMinting TokenToRebond (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting UserUnlockLedger (max_values: None, max_size: Some(135), added: 2610, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting TokenUnlockLedger (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting TimeUnitUnlockLedger (max_values: None, max_size: Some(282), added: 2757, mode: MaxEncodedLen)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Proof: VtokenMinting UnlockingTotal (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:3 w:3)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn rebond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2620`
		//  Estimated: `8769`
		// Minimum execution time: 231_220 nanoseconds.
		Weight::from_parts(235_084_000, 8769)
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	// Storage: VtokenMinting TokenToRebond (r:1 w:1)
	// Proof: VtokenMinting TokenToRebond (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting TokenUnlockLedger (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	// Storage: VtokenMinting TimeUnitUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting TimeUnitUnlockLedger (max_values: None, max_size: Some(282), added: 2757, mode: MaxEncodedLen)
	// Storage: VtokenMinting UserUnlockLedger (r:1 w:1)
	// Proof: VtokenMinting UserUnlockLedger (max_values: None, max_size: Some(135), added: 2610, mode: MaxEncodedLen)
	// Storage: VtokenMinting UnlockingTotal (r:1 w:1)
	// Proof: VtokenMinting UnlockingTotal (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting TokenPool (r:1 w:1)
	// Proof: VtokenMinting TokenPool (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(38), added: 2513, mode: MaxEncodedLen)
	// Storage: VtokenMinting Fees (r:1 w:0)
	// Proof: VtokenMinting Fees (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:3 w:3)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	// Storage: AssetRegistry CurrencyMetadatas (r:1 w:0)
	// Proof Skipped: AssetRegistry CurrencyMetadatas (max_values: None, max_size: None, mode: Measured)
	fn rebond_by_unlock_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2620`
		//  Estimated: `8769`
		// Minimum execution time: 221_577 nanoseconds.
		Weight::from_parts(223_798_000, 8769)
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	// Storage: VtokenMinting OngoingTimeUnit (r:1 w:0)
	// Proof: VtokenMinting OngoingTimeUnit (max_values: None, max_size: Some(27), added: 2502, mode: MaxEncodedLen)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211`
		//  Estimated: `3492`
		// Minimum execution time: 16_412 nanoseconds.
		Weight::from_parts(16_763_000, 3492)
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
